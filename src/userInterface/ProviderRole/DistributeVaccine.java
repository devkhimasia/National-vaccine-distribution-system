/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ProviderRole;

import business.Order;
import business.OrderItem;
import business.Vaccine;
import business.enterprise.Enterprise;
import business.inventory.Inventory;
import business.inventory.InventoryItem;
import business.organization.HospitalOrganization;
import business.organization.Organization;
import business.organization.ProviderOrganization;
import business.workQueue.PaymentRequest;
import java.util.ConcurrentModificationException;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dev
 */
public class DistributeVaccine extends javax.swing.JPanel {

    /**
     * Creates new form ViewOrder
     */
    JPanel userProcessContainer;
   // ClinicOrderRequest cor;
    ProviderOrganization o;
    Order tempOrder;
    Enterprise e;
   // DistributorOrganization distributorOrganization;

    public DistributeVaccine(JPanel userProcessContainer, ProviderOrganization o,Enterprise e) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
       // this.cor = cor;
        this.o = o;
        this.e=e;
        //this.distributorOrganization = distributorOrganization;
        tempOrder = new Order();
        jComboBox1.removeAllItems();;
        for(Organization o1: e.getOrganizationDirectory().getOrganizationList()){
            if(o1 instanceof HospitalOrganization){
                jComboBox1.addItem(o1);
            }
        }
        populateOrderTbl();
//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void populateOrderTbl() {
        DefaultTableModel dtm = (DefaultTableModel) orderTbl.getModel();
        dtm.setRowCount(0);
       
            for (Inventory i : o.getInventoryCatalog().getInventoryList()) {
                Object row[] = new Object[3];
                row[0] = i;
                row[1] = i.getVaccine().getName();
                row[2] = i.getTotalQuantity();
                dtm.addRow(row);
            }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        orderTbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblInventoryItem = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jSpinField1 = new com.toedter.components.JSpinField();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.GridBagLayout());

        orderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Vaccine ID", "Vaccine Name", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(orderTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 429;
        gridBagConstraints.ipady = 87;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 99, 0, 121);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Order Items");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 99, 0, 0);
        add(jLabel1, gridBagConstraints);

        tblInventoryItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine ID", "Vaccine", "Batch Quantity", "Expiry"
            }
        ));
        jScrollPane2.setViewportView(tblInventoryItem);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 429;
        gridBagConstraints.ipady = 81;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 99, 0, 121);
        add(jScrollPane2, gridBagConstraints);

        jLabel2.setText("Inventory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 99, 0, 0);
        add(jLabel2, gridBagConstraints);

        jButton1.setText("Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 34, 0, 0);
        add(jButton1, gridBagConstraints);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine ID", "Vaccine Name", "Quantity", "Expiry"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 429;
        gridBagConstraints.ipady = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(29, 99, 0, 121);
        add(jScrollPane3, gridBagConstraints);

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 29, 0, 0);
        add(jButton2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 37;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 71, 0, 0);
        add(jSpinField1, gridBagConstraints);

        jButton3.setText("SHIP");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.ipady = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(29, 30, 0, 0);
        add(jButton3, gridBagConstraints);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 84;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(46, 43, 0, 0);
        add(jComboBox1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
public void populateSecondTable(int s) {
        boolean flag = false;
        DefaultTableModel dtm = (DefaultTableModel) tblInventoryItem.getModel();
        dtm.setRowCount(0);
       Inventory i = (Inventory) orderTbl.getValueAt(s, 0);
       
                for (InventoryItem ii : i.getInventoryItemList()) {
                    Object row[] = new Object[4];

                    row[0] = ii;
                    row[1] = ii.getVaccine().getName();
                    if (ii.getTempQuantity() != 0) {
                        row[2] = ii.getTempQuantity();
                    } else {
                        row[2] = ii.getQuantity();
                    }
                    row[3] = ii.getExpiry();
                    dtm.addRow(row);
                    flag = true;

           
        }

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int s = orderTbl.getSelectedRow();
        if (s < 0) {
            return;
        } else {
            populateSecondTable(s);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int s = tblInventoryItem.getSelectedRow();
        if (s < 0) {
            return;
        } else {

            int a = jSpinField1.getValue();
            if (a > 0) {
                InventoryItem ii = (InventoryItem) tblInventoryItem.getValueAt(s, 0);
                if (a > ii.getQuantity()) {
                    return;
                } else {
                    int sizeoftemp = tempOrder.getOrder().size();
                    if (sizeoftemp == 0) {
                        OrderItem oi = new OrderItem();
                        oi.setProduct(ii.getVaccine());
                        oi.setQuantity(a);
                        oi.setExpiryDate(ii.getExpiry());
                        tempOrder.getOrder().add(oi);
                        ii.setTempQuantity(ii.getQuantity());
                        ii.setTempQuantity(ii.getTempQuantity()-a);
                        System.out.println(ii.getTempQuantity());
                    } else {
//                        for (Iterator<OrderItem> it = tempOrder.getOrder().iterator(); it.hasNext();) {
//                            OrderItem oii = it.next();
                        try {
                            Boolean chk = true;
                            for (OrderItem oii : tempOrder.getOrder()) {

                                if (oii.getProduct().equals(ii.getVaccine())) {

                                    if (oii.getExpiryDate() == ii.getExpiry()) {
                                        int b = oii.getQuantity();
                                        oii.setQuantity(b + a);
                                        // Date d = ii.getExpiry();
                                        //oii.setExpiryDate(d);
                                        int aaa = ii.getTempQuantity();
                                        ii.setTempQuantity(aaa - a);
                                        chk = false;
                                        break;
                                    }
                                }
                            }
                            if (chk) {
                                OrderItem oi = new OrderItem();
                                oi.setProduct(ii.getVaccine());
                                oi.setQuantity(a);
                                oi.setExpiryDate(ii.getExpiry());
                                tempOrder.getOrder().add(oi);
                                ii.setTempQuantity(ii.getQuantity());
                                ii.setTempQuantity(ii.getTempQuantity() - oi.getQuantity());
                            }
                        } catch (ConcurrentModificationException e) {

                        }
                    }
                    DefaultTableModel dtm = (DefaultTableModel) jTable3.getModel();
                    dtm.setRowCount(0);
                    for (OrderItem ooi : tempOrder.getOrder()) {
                        Object row[] = new Object[4];
                        row[0] = ooi.getProduct();
                        row[1] = ooi.getProduct().getName();
                        row[2] = ooi.getQuantity();
                        row[3] = ooi.getExpiryDate();
                        dtm.addRow(row);
                    }

                }
            } else {
                return;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    private class tempVaccine {

        Vaccine vaccine;
        int quantity;

        public Vaccine getVaccine() {
            return vaccine;
        }

        public void setVaccine(Vaccine vaccine) {
            this.vaccine = vaccine;
        }

        public int getQuantity() {
            return quantity;
        }

        public void setQuantity(int quantity) {
            this.quantity = quantity;
        }

        @Override
        public String toString() {
            return String.valueOf(vaccine);
        }

    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        

            for (OrderItem oi : tempOrder.getOrder()) {
                Boolean fBoolean = true;
                for (Inventory i : o.getInventoryCatalog().getInventoryList()) {
                    if (i.getVaccine().getId()==oi.getProduct().getId()) {
                        for (InventoryItem ii : i.getInventoryItemList()) {
                            if (oi.getExpiryDate() == ii.getExpiry()) {

                                if (ii.getTempQuantity() != 0) {
                                    ii.setQuantity(ii.getTempQuantity());
                                    ii.setTempQuantity(0);
                                    System.out.println(ii.getExpiry());
                                    fBoolean = false;
                                    break;
                                }

                            }
                        }
                        if (!fBoolean) {
                            break;
                        }
                    }
                }
            }
           
            
          HospitalOrganization ho = (HospitalOrganization)jComboBox1.getSelectedItem();
           Boolean flag = true;
                        Boolean flag2 = true;
                        for (OrderItem oi : tempOrder.getOrder()) {
                            // System.out.println("yess");
                            for (Inventory i1 : ho.getInventoryCatalog().getInventoryList()) {
                                if (i1.getVaccine().getId()==oi.getProduct().getId()) {
                                    for (InventoryItem ii : i1.getInventoryItemList()) {
                                        if (ii.getExpiry() == oi.getExpiryDate()) {

                                            ii.setQuantity(ii.getQuantity() + oi.getQuantity());

                                            flag = false;
                                            break;
                                        }
                                    }
                                    if (flag) {
                                        InventoryItem item = new InventoryItem();
                                        item.setVaccine(oi.getProduct());
                                        item.setQuantity(oi.getQuantity());
                                        item.setExpiry(oi.getExpiryDate());
                                        i1.getInventoryItemList().add(item);
                                        flag = false;
                                        break;
                                    }
                                }

                            }
                            if (flag) {
                                Inventory in = new Inventory();
                                // System.out.println("herehere");
                                in.setVaccine(oi.getProduct());
                                InventoryItem ii = new InventoryItem();
                                ii.setVaccine(oi.getProduct());
                                ii.setQuantity(oi.getQuantity());
                                ii.setExpiry(oi.getExpiryDate());
                                in.getInventoryItemList().add(ii);
                                ho.getInventoryCatalog().getInventoryList().add(in);
                            }
                        }

        
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.components.JSpinField jSpinField1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable orderTbl;
    private javax.swing.JTable tblInventoryItem;
    // End of variables declaration//GEN-END:variables
}
