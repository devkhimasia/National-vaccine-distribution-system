/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.HospitalRole;

import business.Order;
import business.OrderItem;
import business.enterprise.PhdEnterprise;
import business.inventory.Inventory;
import business.inventory.InventoryItem;
import business.organization.HospitalOrganization;
import business.organization.Organization;
import business.organization.ProviderOrganization;
import business.organization.ShipperOrganization;
import business.workQueue.EmergencyREquest;
import business.workQueue.PaymentRequest;
import business.workQueue.WarehouseShipmentRequest;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dev
 */
public class ProcessEmergency extends javax.swing.JPanel {

    /**
     * Creates new form ProcessEmergency
     */
    JPanel userProcessContainer;
    HospitalOrganization o;
    EmergencyREquest er;
    Order tempOrder = null;

    public ProcessEmergency(JPanel userProcessContainer, HospitalOrganization o, EmergencyREquest er) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.o = o;
        this.er = er;
        tempOrder = new Order();
        populate();
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void populate() {
        DefaultTableModel dtm = (DefaultTableModel) tblInventoryItem.getModel();
        dtm.setRowCount(0);
        for (Inventory i : o.getInventoryCatalog().getInventoryList()) {
            if (i.getVaccine().getId() == er.getVaccine().getId()) {
                for (InventoryItem ii : i.getInventoryItemList()) {
                    Object row[] = new Object[4];
                    row[0] = ii;
                    row[1] = ii.getVaccine().getName();
                    if (ii.getTempQuantity() != 0) {
                        row[2] = ii.getTempQuantity();
                    } else {
                        row[2] = ii.getQuantity();
                    }
                    row[3] = ii.getExpiry();
                    dtm.addRow(row);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane2 = new javax.swing.JScrollPane();
        tblInventoryItem = new javax.swing.JTable();
        jSpinField1 = new com.toedter.components.JSpinField();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.GridBagLayout());

        tblInventoryItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine ID", "Vaccine", "Batch Quantity", "Expiry"
            }
        ));
        jScrollPane2.setViewportView(tblInventoryItem);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 429;
        gridBagConstraints.ipady = 84;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(48, 115, 0, 121);
        add(jScrollPane2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 258, 0, 0);
        add(jSpinField1, gridBagConstraints);

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 29, 0, 0);
        add(jButton2, gridBagConstraints);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine ID", "Vaccine Name", "Quantity", "Expiry"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 429;
        gridBagConstraints.ipady = 73;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(29, 115, 0, 121);
        add(jScrollPane3, gridBagConstraints);

        jButton3.setText("SHIP");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.ipady = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 280, 204, 0);
        add(jButton3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int s = tblInventoryItem.getSelectedRow();
        if (s < 0) {
            return;
        } else {

            int a = jSpinField1.getValue();
            if (a > 0) {
                InventoryItem ii = (InventoryItem) tblInventoryItem.getValueAt(s, 0);
                if (a > ii.getQuantity()) {
                    return;
                } else {
                    int sizeoftemp = tempOrder.getOrder().size();
                    if (sizeoftemp == 0) {
                        OrderItem oi = new OrderItem();
                        oi.setProduct(ii.getVaccine());
                        oi.setQuantity(a);
                        oi.setExpiryDate(ii.getExpiry());
                        tempOrder.getOrder().add(oi);
                        ii.setTempQuantity(ii.getQuantity());
                        ii.setTempQuantity(ii.getTempQuantity() - oi.getQuantity());
                    } else {
                        //                        for (Iterator<OrderItem> it = tempOrder.getOrder().iterator(); it.hasNext();) {
                        //                            OrderItem oii = it.next();
                        try {
                            Boolean chk = true;
                            for (OrderItem oii : tempOrder.getOrder()) {

                                if (oii.getProduct().equals(ii.getVaccine())) {

                                    if (oii.getExpiryDate() == ii.getExpiry()) {
                                        int b = oii.getQuantity();
                                        oii.setQuantity(b + a);
                                        // Date d = ii.getExpiry();
                                        //oii.setExpiryDate(d);
                                        int aaa = ii.getTempQuantity();
                                        ii.setTempQuantity(aaa - a);
                                        chk = false;
                                        break;
                                    }
                                }
                            }
                            if (chk) {
                                OrderItem oi = new OrderItem();
                                oi.setProduct(ii.getVaccine());
                                oi.setQuantity(a);
                                oi.setExpiryDate(ii.getExpiry());
                                tempOrder.getOrder().add(oi);
                                ii.setTempQuantity(ii.getQuantity());
                                ii.setTempQuantity(ii.getTempQuantity() - oi.getQuantity());
                            }
                        } catch (ConcurrentModificationException e) {

                        }
                    }
                    DefaultTableModel dtm = (DefaultTableModel) jTable3.getModel();
                    dtm.setRowCount(0);
                    // System.out.println("1");
                    for (OrderItem ooi : tempOrder.getOrder()) {
                        // System.out.println("2");
                        Object row[] = new Object[4];
                        row[0] = ooi.getProduct();
                        row[1] = ooi.getProduct().getName();
                        row[2] = ooi.getQuantity();
                        row[3] = ooi.getExpiryDate();
                        dtm.addRow(row);
                    }

                }
            } else {
                return;
            }
        }
        populate();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //System.out.println("cor-" + itemp + " " + "temp-" + tempVaccineList.size());
        for (OrderItem oi : tempOrder.getOrder()) {
            Boolean fBoolean = true;
            for (Inventory i : o.getInventoryCatalog().getInventoryList()) {
                if (i.getVaccine().equals(oi.getProduct())) {
                    for (InventoryItem ii : i.getInventoryItemList()) {
                        if (oi.getExpiryDate() == ii.getExpiry()) {

                            if (ii.getTempQuantity() != 0) {
                                ii.setQuantity(ii.getTempQuantity());
                                ii.setTempQuantity(0);
                                //System.out.println(ii.getExpiry());
                                fBoolean = false;
                                break;
                            }

                        }
                    }
                    if (!fBoolean) {
                        break;
                    }
                }
            }
        }
        ProviderOrganization co = (ProviderOrganization) er.getProvider();
        Boolean flag = true;
        for (OrderItem oi : tempOrder.getOrder()) {
            // System.out.println("yess");
            for (Inventory i1 : co.getInventoryCatalog().getInventoryList()) {
                if (i1.getVaccine().equals(oi.getProduct())) {
                    for (InventoryItem ii : i1.getInventoryItemList()) {
                        if (ii.getExpiry() == oi.getExpiryDate()) {

                            ii.setQuantity(ii.getQuantity() + oi.getQuantity());

                            flag = false;
                            break;
                        }
                    }
                    if (flag) {
                        InventoryItem item = new InventoryItem();
                        item.setVaccine(oi.getProduct());
                        item.setQuantity(oi.getQuantity());
                        item.setExpiry(oi.getExpiryDate());
                        i1.getInventoryItemList().add(item);
                        flag = false;
                        break;
                    }
                }

            }
            if (flag) {
                Inventory in = new Inventory();
                // System.out.println("herehere");
                in.setVaccine(oi.getProduct());
                InventoryItem ii = new InventoryItem();
                ii.setVaccine(oi.getProduct());
                ii.setQuantity(oi.getQuantity());
                ii.setExpiry(oi.getExpiryDate());
                in.getInventoryItemList().add(ii);
                co.getInventoryCatalog().getInventoryList().add(in);
            }
        }
        int quantity = 0;
        int total = 0;
        for (OrderItem oi : tempOrder.getOrder()) {
            total += oi.getQuantity() * oi.getProduct().getHospitalPrice();
            quantity+=oi.getQuantity();
        }
        er.setQuantity(er.getQuantity()-quantity);
        if(er.getQuantity()==0){
            er.setStatus("Inactive");
        }
        tempOrder.setTotalAmount(total);
        PhdEnterprise phd = (PhdEnterprise) er.getSender();

        PaymentRequest pr = new PaymentRequest();
        pr.setSender(o);
        pr.setStatus("Invoice forwarded to State");
        pr.setOrder(tempOrder);
        pr.setReceiver(phd);
        phd.getWorkQueue().getWorkRequestList().add(pr);
        o.getWorkQueue().getWorkRequestList().add(pr);

    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.components.JSpinField jSpinField1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable tblInventoryItem;
    // End of variables declaration//GEN-END:variables
}
