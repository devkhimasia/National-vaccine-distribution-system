/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.DistributorRole;

import business.Order;
import business.OrderItem;
import business.Vaccine;
import business.organization.DistributorOrganization;
import business.organization.ManufactureOrganization;
import business.organization.Organization;
import business.organization.WarehouseOrganization;
import business.workQueue.DistributorVaccineOrder;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dev
 */
public class DistributorPlaceOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ClinicPlaceOrderJPanel
     */
    JPanel userProcessContainer;
    DistributorOrganization o;
    private Boolean isCheckOut = false;
    Order order;

    DistributorPlaceOrderJPanel(JPanel userProcessContainer, DistributorOrganization o) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.o = o;
        if (!isCheckOut) {
            order = o.addOrder();
        }

        //order= clinicOrganization.addOrder();
        // System.out.println(network.getName());
        populateVaccineTable();
        populateCombo();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void populateCombo() {
        jComboBox1.removeAllItems();
        for (Organization o : o.getOrganizationDirectory().getOrganizationList()) {
            if (o instanceof WarehouseOrganization) {
                jComboBox1.addItem(o);
            }
        }
    }

    public void populateVaccineTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblProducts.getModel();
        dtm.setRowCount(0);

        for (Organization o1 : o.getOrganizationDirectory().getOrganizationList()) {
            if (o1 instanceof ManufactureOrganization) {
                ManufactureOrganization mo = (ManufactureOrganization) o1;
                //System.out.println(mo.getStatus());
                if (mo.getStatus().equals("Active")) {
                    for (Vaccine v : mo.getProductCatalog()) {

                        Object row[] = new Object[4];
                        row[0] = v;
                        row[1] = v.getName();
                        row[2] = v.getType();
                        row[3] = v.getPrice();
                        dtm.addRow(row);
                    }
                }
            }
        }
    }

    public void populateVaccineTable(Vaccine v) {
        DefaultTableModel dtm = (DefaultTableModel) tblProducts.getModel();
        dtm.setRowCount(0);
        Object row[] = new Object[3];
        row[0] = v;
        row[1] = v.getName();
        row[2] = v.getType();
        dtm.addRow(row);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtProduct = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        btnAddToCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        spnQuantity = new javax.swing.JSpinner();
        btnCheckOut = new javax.swing.JButton();
        txtModify = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnModify = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(txtProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 20, 85, 23));

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });
        add(btnBrowse, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 19, 84, 25));

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Price"
            }
        ));
        jScrollPane1.setViewportView(tblProducts);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 75, -1, 107));

        btnAddToCart.setText("Add To Order List");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });
        add(btnAddToCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 190, 179, 40));

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine", "Quantity", "Unit Price", "Total Price"
            }
        ));
        jScrollPane2.setViewportView(tblCart);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 250, -1, 144));
        add(spnQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 63, -1));

        btnCheckOut.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        btnCheckOut.setText("Check Out");
        btnCheckOut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 480, 129, 70));
        add(txtModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 410, 97, -1));

        jLabel1.setText("Modify Quantity");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 410, -1, -1));

        btnModify.setText("Modify Quantity");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });
        add(btnModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 410, -1, -1));

        jLabel2.setText("Enter Product Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 24, -1, -1));

        btnRemove.setText("Remove Item");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 450, -1, -1));

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 640, -1, 20));

        jLabel4.setText("Order List");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, -1, -1));

        jLabel5.setText("Vaccine List");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 50, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 500, 173, 20));

        jLabel3.setText("Warehouse");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        String name = txtProduct.getText();
        boolean flag = false;

        for (Organization o1 : o.getOrganizationDirectory().getOrganizationList()) {
            if (o1 instanceof ManufactureOrganization) {
                ManufactureOrganization mo = (ManufactureOrganization) o1;
                for (Vaccine v : mo.getProductCatalog()) {

                    if (v.getName().equalsIgnoreCase(name)) {
                        flag = true;
                        populateVaccineTable(v);
                        break;
                    }

                }
            }
        }

        if (!flag) {
            JOptionPane.showMessageDialog(null, "Product doesnt exist");
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        int selectedRow = tblProducts.getSelectedRow();
        boolean isIncluded = false;

        if (selectedRow >= 0) {
            int quantity = (Integer) spnQuantity.getValue();
            Vaccine vaccine = (Vaccine) tblProducts.getValueAt(selectedRow, 0);
            for (OrderItem oi : order.getOrder()) {
                if (oi.getProduct().getName().equals(vaccine.getName())) {
                    int newQuantity = (Integer) spnQuantity.getValue();

                    oi.setQuantity(newQuantity + oi.getQuantity());
                    //sproduct.setAvailablity((product.getAvailablity() - newQuantity));
                    isIncluded = true;
                    populateVaccineTable();
                    populateCartTable(order);

                }
            }

            if (quantity <= 0) {
                JOptionPane.showMessageDialog(null, "Select quantity");
            } else if (!isIncluded) {
                //Order order = new Order();
                OrderItem orderItem = order.addOrderItem();
                orderItem.setProduct(vaccine);
                orderItem.setQuantity(quantity);
                //product.setAvailablity((product.getAvailablity() - quantity));
                populateCartTable(order);
                populateVaccineTable();

            }
        } else {
            JOptionPane.showMessageDialog(null, "Selec a row");
        }
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        order.setTimestamp(new Date());
        int total = 0;

        WarehouseOrganization wo = (WarehouseOrganization) jComboBox1.getSelectedItem();
        for (OrderItem oi : order.getOrder()) {
            oi.getProduct().setSold(oi.getQuantity());
            // System.out.print(oi.getProduct().getProdName() + "->" + oi.getProduct().getSold());
        }

        Boolean flag = false;

        // System.out.println(mo.getName());
        for (OrderItem v : order.getOrder()) {
            for (Organization mo : o.getOrganizationDirectory().getOrganizationList()) {
                if (mo instanceof ManufactureOrganization) {
                    // System.out.println(v.getProduct().getManufacture().getName());
                    Order temp = null;
                    if (v.getProduct().getManufacture().equals(mo)) {
                        System.out.println("here");
                        temp = new Order();
                        temp.getOrder().add(v);
                        flag = true;
                    }

                    if (flag) {
                        System.out.println(temp.getOrder().size());
                        for (OrderItem oi2 : temp.getOrder()) {

                            Vaccine vaccine = oi2.getProduct();
                            if (vaccine.getType() != "Funded") {
                                total += vaccine.getPrice() * oi2.getQuantity();

                            }
                        }
                        //System.out.println(mo.getName());
                        DistributorVaccineOrder dvo = new DistributorVaccineOrder();
                        dvo.setSender(o);
                        //dvo.setTotal(total);
                        dvo.setStatus("Forwarded to Manufacturer");
                        temp.setTimestamp(new Date());
                        temp.setStatus("Forwarded to Manufacturer");
                        dvo.setOrder(temp);
                        System.out.println(dvo.getOrder().getOrder().size());
                        temp.setTotalAmount(total);
                        dvo.setWarehouse(wo);
                        dvo.setReceiver(wo);
                        mo.getWorkQueue().getWorkRequestList().add(dvo);
                        o.getWorkQueue().getWorkRequestList().add(dvo);
                        flag = false;
                    }
                }
            }
        }

        //order.setStatus("Forwarded to Manufacturer");
        //  moc.addOrder(order);
        isCheckOut = true;
        int opt = JOptionPane.showConfirmDialog(null, "Successfully Checked Out. Do you want to continue Ordering?", "Warning", JOptionPane.YES_NO_OPTION);
        if (opt == JOptionPane.YES_OPTION) {
            order = o.addOrder();
            populateCartTable(order);
        } else {
            userProcessContainer.remove(this);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.previous(userProcessContainer);
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        int selectedRow = tblCart.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a row.");
        } else {
            OrderItem oi = (OrderItem) tblCart.getValueAt(selectedRow, 0);
            //int q=(Integer)spnQuantity.getValue();
            int modq = Integer.parseInt(txtModify.getText());
            if (modq > oi.getQuantity()) {
                int value = modq - oi.getQuantity();
               
                    oi.setQuantity(modq);
                   // oi.getProduct().setAvailablity(oi.getProduct().getAvailablity() - value);
                    populateVaccineTable();
                    populateCartTable(order);
               
            } else {
                int value = oi.getQuantity() - modq;
                oi.setQuantity(modq);
                //oi.getProduct().setAvailablity(oi.getProduct().getAvailablity() + value);
                populateVaccineTable();
                populateCartTable(order);
            }
        }
    }//GEN-LAST:event_btnModifyActionPerformed
    private void populateCartTable(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) tblCart.getModel();
        dtm.setRowCount(0);

        for (OrderItem oi : order.getOrder()) {
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getQuantity();
            Vaccine vaccine = oi.getProduct();
            if (vaccine.getType() != "Funded") {
                row[2] = vaccine.getPrice();
            } else {
                row[2] = "0";
            }
            row[3] = vaccine.getPrice() * oi.getQuantity();
            dtm.addRow(row);
        }
    }
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int s = tblCart.getSelectedRow();
        if (s < 0) {
            JOptionPane.showMessageDialog(null, "Select a row");
        } else {
            OrderItem oi = (OrderItem) tblCart.getValueAt(s, 0);
            int opt = JOptionPane.showConfirmDialog(null, "Are You Sure?", "Warning", JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                //oi.getProduct().setIsCancelled();
                //oi.getProduct().setAvailablity(oi.getProduct().getAvailablity() + oi.getQuantity());
                order.removeOrderItem(oi);
                populateCartTable(order);
                populateVaccineTable();
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

       
            userProcessContainer.remove(this);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.previous(userProcessContainer);
     
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTextField txtModify;
    private javax.swing.JTextField txtProduct;
    // End of variables declaration//GEN-END:variables
}
