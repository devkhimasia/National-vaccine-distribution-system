/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ShipperRole;

import business.OrderItem;
import business.inventory.Inventory;
import business.inventory.InventoryItem;
import business.organization.ClinicOrganization;
import business.organization.HospitalOrganization;
import business.organization.ShipperOrganization;
import business.organization.WarehouseOrganization;
import business.workQueue.ShipmentRequest;
import business.workQueue.WarehouseShipmentRequest;
import business.workQueue.WorkRequest;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dev
 */
public class CompleteShipment extends javax.swing.JPanel {

    JPanel userProcessContainer;
    ShipperOrganization shipperOrganization;

    public CompleteShipment(JPanel userProcessContainer, ShipperOrganization shipperOrganization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.shipperOrganization = shipperOrganization;
        populate();

//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void populate() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        for (WorkRequest w : shipperOrganization.getWorkQueue().getWorkRequestList()) {

            if (w.getStatus() == "In Shipment") {
                Object row[] = new Object[2];
                row[0] = w;
                row[1] = w.getRequestDate();
                // row[2] = w.getResolveDate();
                dtm.addRow(row);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Shipment ID", "Shipment Date"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 352;
        gridBagConstraints.ipady = 90;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 86, 0, 107);
        add(jScrollPane1, gridBagConstraints);

        jButton1.setText("Complete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.ipady = 29;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(36, 210, 164, 0);
        add(jButton1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int s = jTable1.getSelectedRow();
        if (s < 0) {
            return;
        } else {

            WorkRequest wr = (WorkRequest) jTable1.getValueAt(s, 0);
            if (wr instanceof ShipmentRequest) {
                ShipmentRequest sr = (ShipmentRequest) wr;
                sr.setStatus("Completed");
                WarehouseOrganization wo = sr.getDvo().getWarehouse();
                Boolean flag = true;
                System.out.println(sr.getDvo().getOrder().getOrder().size());
                for (OrderItem oi : sr.getDvo().getOrder().getOrder()) {
                    // System.out.println("yess");
                    for (Inventory i1 : wo.getInventoryCatalog().getInventoryList()) {
                        if (i1.getVaccine().equals(oi.getProduct())) {
                            InventoryItem ii = new InventoryItem();
                            ii.setVaccine(oi.getProduct());
                            ii.setQuantity(oi.getQuantity());
                            ii.setExpiry(oi.getExpiryDate());
                            i1.getInventoryItemList().add(ii);
                            flag = false;
                        }
                    }
                    if (flag) {
                        Inventory in = new Inventory();
                        // System.out.println("herehere");
                        in.setVaccine(oi.getProduct());
                        InventoryItem ii = new InventoryItem();
                        ii.setVaccine(oi.getProduct());
                        ii.setQuantity(oi.getQuantity());
                        ii.setExpiry(oi.getExpiryDate());
                        in.getInventoryItemList().add(ii);
                        wo.getInventoryCatalog().getInventoryList().add(in);
                    }
                }

            } else {
                if (wr instanceof WarehouseShipmentRequest) {
                    WarehouseShipmentRequest wsr = (WarehouseShipmentRequest) wr;
                    wsr.setStatus("Completed");
                    wsr.getCor().getOrder().setStatus("Completed");
                    if (wsr.getCor().getHospOrg() != null) {
                        System.out.println("its a clinic order");
                        ClinicOrganization co = (ClinicOrganization) wsr.getCor().getSender();

                        Boolean flag = true;
                        Boolean flag2 = true;
                        for (OrderItem oi : wsr.getCor().getShippedOrder().getOrder()) {
                            // System.out.println("yess");
                            for (Inventory i1 : co.getInventoryCatalog().getInventoryList()) {
                                if (i1.getVaccine().equals(oi.getProduct())) {
                                    for (InventoryItem ii : i1.getInventoryItemList()) {
                                        if (ii.getExpiry() == oi.getExpiryDate()) {

                                            ii.setQuantity(ii.getQuantity() + oi.getQuantity());

                                            flag = false;
                                            break;
                                        }
                                    }
                                    if (flag) {
                                        InventoryItem item = new InventoryItem();
                                        item.setVaccine(oi.getProduct());
                                        item.setQuantity(oi.getQuantity());
                                        item.setExpiry(oi.getExpiryDate());
                                        i1.getInventoryItemList().add(item);
                                        flag = false;
                                        break;
                                    }
                                }

                            }
                            if (flag) {
                                Inventory in = new Inventory();
                                // System.out.println("herehere");
                                in.setVaccine(oi.getProduct());
                                InventoryItem ii = new InventoryItem();
                                ii.setVaccine(oi.getProduct());
                                ii.setQuantity(oi.getQuantity());
                                ii.setExpiry(oi.getExpiryDate());
                                in.getInventoryItemList().add(ii);
                                co.getInventoryCatalog().getInventoryList().add(in);
                            }
                        }

                    } else if (wsr.getCor().getHospOrg() == null) {
                        HospitalOrganization co = (HospitalOrganization) wsr.getCor().getSender();

                        Boolean flag = true;
                        Boolean flag2 = true;
                        for (OrderItem oi : wsr.getCor().getShippedOrder().getOrder()) {
                            // System.out.println("yess");
                            for (Inventory i1 : co.getInventoryCatalog().getInventoryList()) {
                                if (i1.getVaccine().equals(oi.getProduct())) {
                                    for (InventoryItem ii : i1.getInventoryItemList()) {
                                        if (ii.getExpiry() == oi.getExpiryDate()) {

                                            ii.setQuantity(ii.getQuantity() + oi.getQuantity());

                                            flag = false;
                                            break;
                                        }
                                    }
                                    if (flag) {
                                        InventoryItem item = new InventoryItem();
                                        item.setVaccine(oi.getProduct());
                                        item.setQuantity(oi.getQuantity());
                                        item.setExpiry(oi.getExpiryDate());
                                        i1.getInventoryItemList().add(item);
                                        flag = false;
                                        break;
                                    }
                                }

                            }
                            if (flag) {
                                Inventory in = new Inventory();
                                // System.out.println("herehere");
                                in.setVaccine(oi.getProduct());
                                InventoryItem ii = new InventoryItem();
                                ii.setVaccine(oi.getProduct());
                                ii.setQuantity(oi.getQuantity());
                                ii.setExpiry(oi.getExpiryDate());
                                in.getInventoryItemList().add(ii);
                                co.getInventoryCatalog().getInventoryList().add(in);
                            }
                        }
                    }
                }
            }
            populate();
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
